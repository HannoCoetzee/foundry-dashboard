module Contracts.Generated.StakingRewards exposing
    ( OwnerChanged
    , OwnerNominated
    , RewardAdded
    , RewardPaid
    , Staked
    , Withdrawn
    , acceptOwnership
    , balanceOf
    , duration
    , earned
    , exit
    , getReward
    , lastTimeRewardApplicable
    , lastUpdateTime
    , nominateNewOwner
    , nominatedOwner
    , notifyRewardAmount
    , owner
    , ownerChangedDecoder
    , ownerChangedEvent
    , ownerNominatedDecoder
    , ownerNominatedEvent
    , periodFinish
    , rewardAddedDecoder
    , rewardAddedEvent
    , rewardPaidDecoder
    , rewardPaidEvent
    , rewardPerToken
    , rewardPerTokenStored
    , rewardRate
    , rewards
    , rewardsDistribution
    , rewardsToken
    , setRewardsDistribution
    , stake
    , stakedDecoder
    , stakedEvent
    , stakingToken
    , totalSupply
    , userRewardPerTokenPaid
    , withdraw
    , withdrawnDecoder
    , withdrawnEvent
    )

import BigInt exposing (BigInt)
import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v3.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- acceptOwnership() function


acceptOwnership : Address -> Call ()
acceptOwnership contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "79ba5097" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- balanceOf(address) function


balanceOf : Address -> Address -> Call BigInt
balanceOf contractAddress account_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "70a08231" [ E.address account_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- duration() function


duration : Address -> Call BigInt
duration contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "0fb5a6b4" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- earned(address) function


earned : Address -> Address -> Call BigInt
earned contractAddress account_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "008cc262" [ E.address account_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- exit() function


exit : Address -> Call ()
exit contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e9fad8ee" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- getReward() function


getReward : Address -> Call ()
getReward contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "3d18b912" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- lastTimeRewardApplicable() function


lastTimeRewardApplicable : Address -> Call BigInt
lastTimeRewardApplicable contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "80faa57d" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- lastUpdateTime() function


lastUpdateTime : Address -> Call BigInt
lastUpdateTime contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c8f33c91" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- nominateNewOwner(address) function


nominateNewOwner : Address -> Address -> Call ()
nominateNewOwner contractAddress owner_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "1627540c" [ E.address owner_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- nominatedOwner() function


nominatedOwner : Address -> Call Address
nominatedOwner contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "53a47bb7" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- notifyRewardAmount(uint256) function


notifyRewardAmount : Address -> BigInt -> Call ()
notifyRewardAmount contractAddress reward_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "3c6b16ab" [ E.uint reward_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- owner() function


owner : Address -> Call Address
owner contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8da5cb5b" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- periodFinish() function


periodFinish : Address -> Call BigInt
periodFinish contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "ebe2b12b" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- rewardPerToken() function


rewardPerToken : Address -> Call BigInt
rewardPerToken contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "cd3daf9d" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- rewardPerTokenStored() function


rewardPerTokenStored : Address -> Call BigInt
rewardPerTokenStored contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "df136d65" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- rewardRate() function


rewardRate : Address -> Call BigInt
rewardRate contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "7b0a47ee" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- rewards(address) function


rewards : Address -> Address -> Call BigInt
rewards contractAddress a_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "0700037d" [ E.address a_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- rewardsDistribution() function


rewardsDistribution : Address -> Call Address
rewardsDistribution contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "3fc6df6e" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- rewardsToken() function


rewardsToken : Address -> Call Address
rewardsToken contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "d1af0c7d" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- setRewardsDistribution(address) function


setRewardsDistribution : Address -> Address -> Call ()
setRewardsDistribution contractAddress rewardsDistribution_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "19762143" [ E.address rewardsDistribution_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- stake(uint256) function


stake : Address -> BigInt -> Call ()
stake contractAddress amount_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "a694fc3a" [ E.uint amount_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- stakingToken() function


stakingToken : Address -> Call Address
stakingToken contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "72f702f3" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }



-- totalSupply() function


totalSupply : Address -> Call BigInt
totalSupply contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "18160ddd" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- userRewardPerTokenPaid(address) function


userRewardPerTokenPaid : Address -> Address -> Call BigInt
userRewardPerTokenPaid contractAddress a_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8b876347" [ E.address a_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- withdraw(uint256) function


withdraw : Address -> BigInt -> Call ()
withdraw contractAddress amount_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "2e1a7d4d" [ E.uint amount_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- OwnerChanged(address,address) event


type alias OwnerChanged =
    { oldOwner : Address
    , newOwner : Address
    }


ownerChangedEvent : Address -> LogFilter
ownerChangedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "b532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c" ]
    }


ownerChangedDecoder : Decoder OwnerChanged
ownerChangedDecoder =
    Decode.succeed OwnerChanged
        |> custom (data 0 D.address)
        |> custom (data 1 D.address)



-- OwnerNominated(address) event


type alias OwnerNominated =
    { newOwner : Address }


ownerNominatedEvent : Address -> LogFilter
ownerNominatedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22" ]
    }


ownerNominatedDecoder : Decoder OwnerNominated
ownerNominatedDecoder =
    Decode.succeed OwnerNominated
        |> custom (data 0 D.address)



-- RewardAdded(uint256) event


type alias RewardAdded =
    { reward : BigInt }


rewardAddedEvent : Address -> LogFilter
rewardAddedEvent contractAddress =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "de88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d" ]
    }


rewardAddedDecoder : Decoder RewardAdded
rewardAddedDecoder =
    Decode.succeed RewardAdded
        |> custom (data 0 D.uint)



-- RewardPaid(address,uint256) event


type alias RewardPaid =
    { user : Address
    , reward : BigInt
    }


rewardPaidEvent : Address -> Maybe Address -> LogFilter
rewardPaidEvent contractAddress user_ =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.unsafeToHex "e2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486"
        , Maybe.map (abiEncode << E.address) user_
        ]
    }


rewardPaidDecoder : Decoder RewardPaid
rewardPaidDecoder =
    Decode.succeed RewardPaid
        |> custom (topic 1 D.address)
        |> custom (data 0 D.uint)



-- Staked(address,uint256) event


type alias Staked =
    { user : Address
    , amount : BigInt
    }


stakedEvent : Address -> Maybe Address -> LogFilter
stakedEvent contractAddress user_ =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.unsafeToHex "9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d"
        , Maybe.map (abiEncode << E.address) user_
        ]
    }


stakedDecoder : Decoder Staked
stakedDecoder =
    Decode.succeed Staked
        |> custom (topic 1 D.address)
        |> custom (data 0 D.uint)



-- Withdrawn(address,uint256) event


type alias Withdrawn =
    { user : Address
    , amount : BigInt
    }


withdrawnEvent : Address -> Maybe Address -> LogFilter
withdrawnEvent contractAddress user_ =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.unsafeToHex "7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5"
        , Maybe.map (abiEncode << E.address) user_
        ]
    }


withdrawnDecoder : Decoder Withdrawn
withdrawnDecoder =
    Decode.succeed Withdrawn
        |> custom (topic 1 D.address)
        |> custom (data 0 D.uint)
