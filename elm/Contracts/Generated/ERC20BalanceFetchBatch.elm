module Contracts.Generated.ERC20BalanceFetchBatch exposing
    ( balances
    , tokenBalance
    )

import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- balances(address[],address[]) function


balances : Address -> List (Address) -> List (Address) -> Call (List (BigInt))
balances contractAddress users_ tokens_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "f0002ea9" [ (E.list << List.map E.address) users_, (E.list << List.map E.address) tokens_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.dynamicArray D.uint)
    }


-- tokenBalance(address,address) function


tokenBalance : Address -> Address -> Address -> Call BigInt
tokenBalance contractAddress user_ token_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "1049334f" [ E.address user_, E.address token_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


